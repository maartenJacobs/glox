package main

import (
	"fmt"
	"go/format"
	"os"
	"strings"
)

func main() {
	argv := os.Args[1:]
	if len(argv) != 1 {
		fmt.Println("Usage: genast <output_directory>")
		os.Exit(1)
	}

	// Generate the source code.
	output := defineAst([]string{
		"Binary   : Left Expr\nOperator Token\nRight Expr",
		"Grouping : Expression Expr",
		"Literal  : Value fmt.Stringer",
		"Unary    : Operator Token\nRight Expr",
		"Ternary  : Cond Expr\nTrueBranch Expr\nFalseBranch Expr",
	})

	// Format the source code before writing to disk.
	source, err := format.Source(output)
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}

	// Write to disk.
	outputDir := argv[0]
	path := outputDir + "/ast.go"
	file, err := os.OpenFile(path, os.O_CREATE|os.O_TRUNC|os.O_WRONLY, 0664)
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	if _, werr := file.Write(source); werr != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}

func defineAst(types []string) (output []byte) {
	// Interpret the types.
	var visitFuncs []string
	var exprStructs []string
	for _, exprLine := range types {
		exprType := strings.TrimSpace(strings.Split(exprLine, ":")[0])
		exprFields := strings.TrimSpace(strings.Split(exprLine, ":")[1])
		visitFuncs = append(visitFuncs, fmt.Sprintf("Visit%s(%s) (error, interface{})", exprType, exprType))
		exprStructs = append(exprStructs, fmt.Sprintf("type %s struct {\n%s\n}\n\nfunc (e %s) Visit(v ExprVisitor) (error, interface{}) "+
			"{\n\treturn v.Visit%s(e)\n}", exprType, exprFields, exprType, exprType))
	}

	output = append(output, "package internal\n"...)
	output = append(output, "\n"...)
	output = append(output, "import \"fmt\"\n"...)
	output = append(output, "\n"...)
	output = append(output, "// WARNING: autogenerated file. Do not modify this file, other than to format.\n"...)
	output = append(output, "\n"...)
	// Add ExprVisitor
	output = append(output, fmt.Sprintf("type ExprVisitor interface {\n\t%s\n}\n\n", strings.Join(visitFuncs, "\n\t"))...)
	// Add Expr
	output = append(output, "type Expr interface {\n\tVisit(v ExprVisitor) (error, interface{})\n}\n"...)
	// Add Expr types
	output = append(output, strings.Join(exprStructs, "\n\n")...)

	return
}
