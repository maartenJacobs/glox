package main

import (
	"fmt"
	"go/format"
	"os"
	"strings"
)

func main() {
	argv := os.Args[1:]
	if len(argv) != 1 {
		fmt.Println("Usage: genast <output_directory>")
		os.Exit(1)
	}

	output := strings.Builder{}
	output.WriteString("package internal\n")
	output.WriteString("\n")
	output.WriteString("import \"fmt\"\n")
	output.WriteString("\n")
	output.WriteString("// WARNING: autogenerated file. Do not modify this file, other than to format.\n")
	output.WriteString("\n")

	// Generate the source code.
	defineAst(&output, "Expr", []string{
		"Binary   : Left Expr\nOperator Token\nRight Expr",
		"Grouping : Expression Expr",
		"Literal  : Value fmt.Stringer",
		"Unary    : Operator Token\nRight Expr",
		"Ternary  : Cond Expr\nTrueBranch Expr\nFalseBranch Expr",
	})
	defineAst(&output, "Stmt", []string{
		"Expression : Expr *Expression",
		"Print		: Expr Expression",
	})

	// Format the source code before writing to disk.
	source, err := format.Source([]byte(output.String()))
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}

	// Write to disk.
	outputDir := argv[0]
	path := outputDir + "/ast.go"
	file, err := os.OpenFile(path, os.O_CREATE|os.O_TRUNC|os.O_WRONLY, 0664)
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	if _, werr := file.Write(source); werr != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}

func defineAst(output *strings.Builder, typeName string, types []string) {
	// Interpret the types.
	var visitFuncs []string
	var substructs []string
	for _, exprLine := range types {
		exprType := strings.TrimSpace(strings.Split(exprLine, ":")[0])
		exprFields := strings.TrimSpace(strings.Split(exprLine, ":")[1])
		visitFuncs = append(visitFuncs, fmt.Sprintf("Visit%s(%s) (error, interface{})", exprType, exprType))
		substructs = append(substructs, fmt.Sprintf("type %s struct {\n%s\n}\n\nfunc (e %s) Visit(v %sVisitor) (error, interface{}) "+
			"{\n\treturn v.Visit%s(e)\n}", exprType, exprFields, exprType, typeName, exprType))
	}

	// Add visitor
	output.WriteString(fmt.Sprintf("type %sVisitor interface {\n\t%s\n}\n\n", typeName, strings.Join(visitFuncs, "\n\t")))
	// Add base type
	output.WriteString(fmt.Sprintf("type %s interface {\n\tVisit(v %sVisitor) (error, interface{})\n}\n", typeName, typeName))
	// Add subtypes
	output.WriteString(strings.Join(substructs, "\n\n"))
	output.WriteString("\n")

	return
}
